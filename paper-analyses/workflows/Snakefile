# This file contains reuseable modules that can be imported into other Snakemake workflows

wildcard_constraints:
    sample="[^.]*"

if config["ENCDIR"].strip() != "" and config["ENCODE"].strip() != "":
    PEAKFILE = "%s/%s/%s.bed"%(config["ENCDIR"], config["ENCODE"], config["ENCODE"])
    MODELFILE = "%s/%s/%s-1.9.json"%(config["ENCDIR"], config["ENCODE"], config["ENCODE"])
else:
    PEAKFILE = config["PEAKFILE"]
    MODELFILE = config["MODELFILE"]

# Note, create all three output files.
# For paired end, {sample}.fastq will be empty
# For single end, {sample}_[1|2].fastq will be empty
rule sim:
    input:
        "params/{sample}.params"
    output:
        "fastqs/{sample}.fastq",
	"fastqs/{sample}_1.fastq",
	"fastqs/{sample}_2.fastq"
    benchmark:
        "metrics/{sample}.sim_metrics"
    run:
        if config["METHOD"] == "chips":
            if config["LAYOUT"] == 'single':
                shell("chips simreads -p {PEAKFILE} -t bed --model {MODELFILE} -f {config[REF]} -o fastqs/{wildcards.sample} $(cat {input}) --region {config[REGION]} && touch {output[1]} && touch {output[2]}")
            else:
                shell("chips simreads -p {PEAKFILE} -t bed --model {MODELFILE} -f {config[REF]} -o fastqs/{wildcards.sample} $(cat {input}) --region {config[REGION]} --paired && touch {output[0]}")
        elif config["METHOD"] == "chipulate":
            shell("python3 /storage/yuq005/Tools/chipulate/chipulate.py -g {config[REF]} --chrom-size-file {config[REF]}.fai $(cat {input}) -o fastqs/{wildcards.sample}")
        else:
            shell("echo 'Not implemented yet' && exit 1")

rule simwce:
    input:
        "params/{sample}.params"
    output:
        "fastqs/{sample}_wce.fastq",
	"fastqs/{sample}_wce_1.fastq",
        "fastqs/{sample}_wce_2.fastq"
    run:
        if config["LAYOUT"] == 'single':
            shell("chips simreads -t wce --model {MODELFILE} -f {config[REF]} -o fastqs/{wildcards.sample}_wce $(cat {input}) --region {config[REGION]} && touch {output[1]} {output[2]}")
        else:
            shell("chips simreads -t wce --model {MODELFILE} -f {config[REF]} -o fastqs/{wildcards.sample}_wce $(cat {input}) --region {config[REGION]} --paired && touch {output[0]}")

rule bwa:
    input:
        "fastqs/{sample}.fastq",
        "fastqs/{sample}_1.fastq",
        "fastqs/{sample}_2.fastq"
    output:
        "bams/{sample}.bam"
    threads: 8
    run:
        if config["LAYOUT"] == 'single':
            shell("bwa mem -t {threads} {config[REF]} {input[0]} | samtools view -q 10 -Sb -  > {output}")
        else:
            shell("bwa mem -t {threads} {config[REF]} {input[1]} {input[2]} | samtools view -q 10 -Sb -  > {output}")

rule sort_index:
    input:
        "bams/{sample}.bam"
    output:
        bam="bams/{sample}.sorted.bam",
        bai="bams/{sample}.sorted.bam.bai"
    shell:
        "samtools sort -o {output.bam} {input} && samtools index {output.bam}"

rule markdups:
    input:
        bam="bams/{sample}.sorted.bam",
	bai="bams/{sample}.sorted.bam.bai"
    output:
        bam="bams/{sample}.flagged.bam",
        metrics="bams/{sample}.metrics",
	bai="bams/{sample}.flagged.bam.bai"
    shell:
        "java -jar -Xmx12G -Djava.io.tmpdir=bams/ $PICARD MarkDuplicates VALIDATION_STRINGENCY=SILENT VERBOSITY=WARNING I={input.bam} M={output.metrics} O={output.bam} && samtools index {output.bam}"

rule tdf:
    input:
        "bams/{sample}.flagged.bam"
    output:
        "tdfs/{sample}.tdf"
    shell:
        "igvtools count -z 5 -w 25 -e 0 {input} {output} {config[REF]}"

rule peaks_narrow:
    input:
        bamfg="bams/{sample}.flagged.bam",
        bambg="bams/{sample}_wce.flagged.bam",
        bamfgbai="bams/{sample}.flagged.bam.bai",
        bambgbai="bams/{sample}_wce.flagged.bam.bai"
    output:
        "peaks/{sample}_narrow_peaks.narrowPeak"
    shell:
        "macs2 callpeak --tempdir peaks/ -t {input.bamfg} -c {input.bambg} --name {wildcards.sample}_narrow --nomodel --outdir peaks/"

rule peaks_broad:
    input:
        bamfg="bams/{sample}.flagged.bam",
        bambg="bams/{sample}_wce.flagged.bam",
        bamfgbai="bams/{sample}.flagged.bam.bai",
        bambgbai="bams/{sample}_wce.flagged.bam.bai"
    output:
        "peaks/{sample}_broad_peaks.broadPeak"
    shell:
        "macs2 callpeak --broad --tempdir peaks/ -t {input.bamfg} -c {input.bambg} --name {wildcards.sample}_broad --nomodel --outdir peaks/"

rule metrics_broad:
    input:
        simpeaks="peaks/{sample}_broad_peaks.broadPeak",
	simbam="bams/{sample}.flagged.bam"
    output:
        "metrics/{sample}.broad.metrics"
    shell:
        "/storage/mlamkin/projects/chips/paper-analyses/workflows/peak_metrics.sh {PEAKFILE} {input.simpeaks} {input.simbam} {config[REGION]} > {output}"

rule metrics_narrow:
    input:
        simpeaks="peaks/{sample}_narrow_peaks.narrowPeak",
	simbam="bams/{sample}.flagged.bam"
    output:
        "metrics/{sample}.narrow.metrics"
    shell:
        "/storage/mlamkin/projects/chips/paper-analyses/workflows/peak_metrics.sh {PEAKFILE} {input.simpeaks} {input.simbam} {config[REGION]} > {output}"

# Final summary of each sample
rule summarize_sample:
    input:
        "metrics/{sample}.narrow.metrics",
        "metrics/{sample}.broad.metrics",
        "metrics/{sample}.sim_metrics",
        "tdfs/{sample}.tdf",
        "tdfs/{sample}_wce.tdf"
    output:
        "metrics/{sample}.final.tab"
    shell:
        "/storage/mlamkin/projects/chips/paper-analyses/workflows/gather_stats.sh {input[0]} {input[1]} {input[2]} > {output}"
