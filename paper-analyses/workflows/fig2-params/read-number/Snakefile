# Import most functionality from top level snakefile
# Here we just define the parameters that change and generate the params files
#
# Simulated Peak files to use for evaluation
#/storage/pandaman/project/ChIPs-experiments/data/TF-SP1-sim.bed
#/storage/pandaman/project/ChIPs-experiments/data/HM-H3K27ac-sim.bed

config["REF"] = "/storage/resources/dbase/human/hg19/hg19.fa"
config["ENCODE"] = ""
config["ENCDIR"] = ""
config["REGION"] = "chr21:1-48129895"
config["C"] = 4

include: "/storage/mlamkin/workspace/chips/paper-analyses/workflows/Snakefile"

NUMREADS = [1000, 10000, 100000, 1000000]

rule all:
    input:
        "{outprefix}.summary_stats_readnum.tab".format(outprefix=config["OUTPREFIX"]),
        expand("params/"+config["OUTPREFIX"]+"_simlearn-numreads{numreads}.json", numreads=NUMREADS)

rule create_params_file:
    output:
        "params/" + config["OUTPREFIX"] + "-numreads{numreads,\d+}.params"
    shell:
        "echo --scale-outliers -c {config[C]} --numcopies 1000 --thread 4 --numreads {wildcards.numreads} --readlen 36 > {output}"

rule learn_from_results:
    input:
        expand("bams/"+config["OUTPREFIX"]+"-numreads{numreads}.flagged.bam", numreads=NUMREADS)
    output:
        "params/" + config["OUTPREFIX"] + "_simlearn-numreads{numreads,\d+}.json"
    run:
        if config["LAYOUT"] == 'single':
            shell("/storage/mlamkin/workspace/chips/build/chips learn -p {PEAKFILE} -t bed -c {config[C]} -b bams/"+config["OUTPREFIX"]+"-numreads{wildcards.numreads}.flagged.bam -o params/" + config["OUTPREFIX"] + "_simlearn-numreads{wildcards.numreads} --thres 0 && touch {output}")
        else:
            shell("/storage/mlamkin/workspace/chips/build/chips learn -p {PEAKFILE} -t bed -c {config[C]} -b bams/"+config["OUTPREFIX"]+"-numreads{wildcards.numreads}.flagged.bam -o params/" + config["OUTPREFIX"] + "_simlearn-numreads{wildcards.numreads} --thres 0 --paired && touch {output}")

#rule summarize_all:
#    input:
#        expand("metrics/numreads{numreads}.final.tab", numreads=NUMREADS)
#    output:
#        "summary_stats_readnum.tab"
#    run:
#       shell("head -n 1 {input[0]} | awk '{{print \"numreads\\t\" $0}}' >> {output}")
#       for nr in NUMREADS:
#           shell("tail -n 1 metrics/numreads%s.final.tab | awk '{{print \"%s\\t\" $0}}' >> {output}"%(nr, nr))

rule summarize_all:
    input:
        expand("metrics/"+config["OUTPREFIX"]+"-numreads{numreads}.final.tab", numreads=NUMREADS)
    output:
        "{outprefix}.summary_stats_readnum.tab".format(outprefix=config["OUTPREFIX"])
    run:
       shell("head -n 1 {input[0]} | awk '{{print \"numreads\\t\" $0}}' >> {output}")
       for nr in NUMREADS:
           shell("tail -n 1 metrics/{config[OUTPREFIX]}-numreads%s.final.tab | awk '{{print \"%s\\t\" $0}}' >> {output}"%(nr, nr))



